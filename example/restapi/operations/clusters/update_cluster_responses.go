package clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/mikkeloscar/gin-swagger/example/models"
)

// HTTP code for type UpdateClusterOK
const UpdateClusterOKCode int = 200

/*UpdateClusterOK The cluster update request is performed and the updated cluster is returned.

swagger:response updateClusterOK
*/
type UpdateClusterOK struct {

	/*
	  In: Body
	*/
	Payload *models.Cluster `json:"body,omitempty"`
}

// NewUpdateClusterOK creates UpdateClusterOK with default headers values
func NewUpdateClusterOK() *UpdateClusterOK {
	return &UpdateClusterOK{}
}

// WithPayload adds the payload to the update cluster o k response
func (o *UpdateClusterOK) WithPayload(payload *models.Cluster) *UpdateClusterOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update cluster o k response
func (o *UpdateClusterOK) SetPayload(payload *models.Cluster) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateClusterOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// HTTP code for type UpdateClusterUnauthorized
const UpdateClusterUnauthorizedCode int = 401

/*UpdateClusterUnauthorized Unauthorized

swagger:response updateClusterUnauthorized
*/
type UpdateClusterUnauthorized struct {
}

// NewUpdateClusterUnauthorized creates UpdateClusterUnauthorized with default headers values
func NewUpdateClusterUnauthorized() *UpdateClusterUnauthorized {
	return &UpdateClusterUnauthorized{}
}

// WriteResponse to the client
func (o *UpdateClusterUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
}

// HTTP code for type UpdateClusterForbidden
const UpdateClusterForbiddenCode int = 403

/*UpdateClusterForbidden Forbidden

swagger:response updateClusterForbidden
*/
type UpdateClusterForbidden struct {
}

// NewUpdateClusterForbidden creates UpdateClusterForbidden with default headers values
func NewUpdateClusterForbidden() *UpdateClusterForbidden {
	return &UpdateClusterForbidden{}
}

// WriteResponse to the client
func (o *UpdateClusterForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
}

// HTTP code for type UpdateClusterNotFound
const UpdateClusterNotFoundCode int = 404

/*UpdateClusterNotFound Cluster not found

swagger:response updateClusterNotFound
*/
type UpdateClusterNotFound struct {
}

// NewUpdateClusterNotFound creates UpdateClusterNotFound with default headers values
func NewUpdateClusterNotFound() *UpdateClusterNotFound {
	return &UpdateClusterNotFound{}
}

// WriteResponse to the client
func (o *UpdateClusterNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
}

// HTTP code for type UpdateClusterInternalServerError
const UpdateClusterInternalServerErrorCode int = 500

/*UpdateClusterInternalServerError Unexpected error

swagger:response updateClusterInternalServerError
*/
type UpdateClusterInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewUpdateClusterInternalServerError creates UpdateClusterInternalServerError with default headers values
func NewUpdateClusterInternalServerError() *UpdateClusterInternalServerError {
	return &UpdateClusterInternalServerError{}
}

// WithPayload adds the payload to the update cluster internal server error response
func (o *UpdateClusterInternalServerError) WithPayload(payload *models.Error) *UpdateClusterInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the update cluster internal server error response
func (o *UpdateClusterInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UpdateClusterInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
