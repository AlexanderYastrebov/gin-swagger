package {{ .APIPackage }}

import (
	"context"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"
	"strings"

	"golang.org/x/oauth2"

	"github.com/gin-contrib/pprof"
	"github.com/gin-gonic/gin"
	ginoauth2 "github.com/zalando/gin-oauth2"
	"github.com/mikkeloscar/gin-swagger/middleware"
	"github.com/mikkeloscar/gin-swagger/api"
	log "github.com/sirupsen/logrus"
	"github.com/mikkeloscar/gin-swagger/tracing"
	opentracing "github.com/opentracing/opentracing-go"
	{{range .DefaultImports}}{{printf "%q" .}}
	{{end}}
	{{range $key, $value := .Imports}}{{$key}} {{ printf "%q" $value}}
	{{end}}
)

// Routes defines all the routes of the Server service.
type Routes struct {
	*gin.Engine
	{{range .Operations}}{{ pascalize .Name }} struct {
		*gin.RouterGroup
		{{ if .Authorized }}Auth gin.HandlerFunc {{end}}
		Post *gin.RouterGroup
	}
{{end}}
}

// configureWellKnown enables and configures /.well-known endpoints.
func (r *Routes) configureWellKnown(healthFunc func() bool) {
	wellKnown := r.Group("/.well-known")
	{
		wellKnown.GET("/schema-discovery", func(ctx *gin.Context) {
			discovery := struct {
				SchemaURL  string `json:"schema_url"`
				SchemaType string `json:"schema_type"`
				UIURL      string `json:"ui_url"`
			}{
				SchemaURL:  "/swagger.json",
				SchemaType: "swagger-2.0",
			}
			ctx.JSON(http.StatusOK, &discovery)
		})
		wellKnown.GET("/health", healthHandler(healthFunc))
	}

	r.GET("/swagger.json", func(ctx *gin.Context) {
		ctx.String(http.StatusOK, string(SwaggerJSON))
	})
}

// healthHandler is the health HTTP handler used for the /.well-known/health
// route if enabled.
func healthHandler(healthFunc func() bool) gin.HandlerFunc {
	healthy := healthFunc
	return func(ctx *gin.Context) {
			health := struct {
				Health bool `json:"health"`
			}{
				Health: healthy(),
			}

			if !health.Health {
				ctx.JSON(http.StatusServiceUnavailable, &health)
			} else {
				ctx.JSON(http.StatusOK, &health)
			}
	}
}

// Service is the interface that must be implemented in order to provide
// business logic for the Server service.
type Service interface {
	Healthy() bool
	{{range .Operations}}{{ pascalize .Name }}(ctx *gin.Context{{ if .Params }}, params *{{.Package}}.{{ pascalize .Name }}Params{{ end }}) *api.Response
{{end}}
}

func ginizePath(path string) string {
	return strings.Replace(strings.Replace(path, "{", ":", -1), "}", "", -1)
}

// configureRoutes configures the routes for the Server service.
func configureRoutes(service Service, enableAuth bool, tokenURL string, tracer opentracing.Tracer) *Routes {
	engine := gin.New()
	engine.Use(gin.Recovery())
	routes := &Routes{Engine: engine}

	{{range .Operations}}routes.{{ pascalize .Name }}.RouterGroup = routes.Group("")
	routes.{{ pascalize .Name }}.RouterGroup.Use(middleware.LogrusLogger())
	if tracer != nil {
		routes.{{ pascalize .Name }}.RouterGroup.Use(tracing.InitSpan(tracer, "{{ snakize .Name }}"))
	}
	{{ if ne .Method "GET" }}routes.{{ pascalize .Name }}.RouterGroup.Use(middleware.ContentTypes({{range $index, $typ := .ConsumesMediaTypes}}{{if $index}},{{end}}"{{$typ}}"{{end}}))
{{ end }}	{{ if .Authorized }}if enableAuth {
		{{ $routeName := (pascalize .Name) }}
		{{ $securityDefinitions := .SecurityDefinitions }}
		{{ range .Security }}{{ range . }}{{ $def := index $securityDefinitions .Name }}
		{{ if eq $def.SecuritySchemeProps.Type "oauth2" }}
		routeTokenURL := tokenURL
		if routeTokenURL == "" {
			routeTokenURL = {{printf "%q" $def.SecuritySchemeProps.TokenURL}}
		}
		routes.{{ $routeName }}.Auth = ginoauth2.Auth(
			middleware.ScopesAuth({{range $index, $scope := .Scopes}}{{if $index}},{{end}}"{{$scope}}"{{end}}),
			oauth2.Endpoint{
				TokenURL: routeTokenURL,
			},
		)
		{{ end }}
		routes.{{ $routeName }}.RouterGroup.Use(routes.{{ $routeName }}.Auth)
		{{ end }}{{ end }}
	}
{{end}}	routes.{{ pascalize .Name }}.Post = routes.{{ pascalize .Name }}.Group("")
	routes.{{ pascalize .Name }}.Post.{{.Method}}(ginizePath({{printf "%q" .Path}}), {{.Package}}.{{ pascalize .Name }}Endpoint(service.{{ pascalize .Name }}))

{{end}}
	return routes
}

// Server defines the Server service.
type Server struct {
	Routes *Routes
	config *Config
	server *http.Server
	Title string
	Version string
}

// NewServer initializes a new Server service.
func NewServer(svc Service, config *Config) *Server {
	if !config.Debug {
		gin.SetMode(gin.ReleaseMode)
	}

	api := &Server{
		Routes: configureRoutes(
			svc,
			!config.AuthDisabled,
			config.TokenURL,
			config.Tracer,
		),
		config: config,
		Title: "{{ .Info.Title }}",
		Version: "{{ .Info.Version }}",
	}

	// enable pprof http endpoints in debug mode
	if config.Debug {
		pprof.Register(api.Routes.Engine, nil)
	}

	// set logrus logger to TextFormatter with no colors
	log.SetFormatter(&log.TextFormatter{DisableColors: true})

	api.server = &http.Server{
		Addr:         config.Address,
		Handler:      api.Routes.Engine,
		ReadTimeout:  10 * time.Second,
		WriteTimeout: 10 * time.Second,
	}

	if !config.WellKnownDisabled {
		api.Routes.configureWellKnown(svc.Healthy)
	}

	// configure healthz endpoint
	api.Routes.GET("/healthz", healthHandler(svc.Healthy))

	return api
}

// Run runs the Server server it will listen on either HTTP or HTTPS depending on
// the config passed to NewServer.
func (a *Server) Run() error {
	log.Infof("Serving '%s - %s' on address %s", a.Title, a.Version, a.server.Addr)
	if a.config.InsecureHTTP {
		return a.server.ListenAndServe()
	}
	return a.server.ListenAndServeTLS(a.config.TLSCertFile, a.config.TLSKeyFile)
}

// Shutdown will gracefully shutdown the Server server.
func (a *Server) Shutdown() error {
	return a.server.Shutdown(context.Background())
}

// RunWithSigHandler runs the Server server with SIGTERM handling automatically
// enabled. The server will listen for a SIGTERM signal and gracefully shutdown
// the web server.
// It's possible to optionally pass any number shutdown functions which will
// execute one by one after the webserver has been shutdown successfully.
func (a *Server) RunWithSigHandler(shutdown ...func() error) error {
	sigCh := make(chan os.Signal, 1)
	signal.Notify(sigCh, syscall.SIGTERM)

	go func() {
		<-sigCh
		a.Shutdown()
	}()

	err := a.Run()
	if err != nil {
		if err != http.ErrServerClosed {
			return err
		}
	}

	for _, fn := range shutdown {
		err := fn()
		if err != nil {
			return err
		}
	}

	return nil
}
// vim: ft=go
